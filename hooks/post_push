#!/bin/bash

# Use docker cli v20.10.3 to use experimental manifest feature
curl -SL "https://download.docker.com/linux/static/stable/x86_64/docker-20.10.7.tgz" | tar xzv docker/docker --transform='s/.*/docker-cli/'
mkdir ~/.docker
# Add auths and experimental to docker-cli config
echo '{"auths": '$DOCKERCFG',"experimental":"enabled"}' > ~/.docker/config.json
# Check if all arch images are in dockerhub
VIRTUAL_IMAGE=$(echo "${IMAGE_NAME}" | rev | cut -d- -f2- | rev )

AMD64_IMAGE="$VIRTUAL_IMAGE-amd64"
ARM64_IMAGE="$VIRTUAL_IMAGE-arm64v8"
ARMV7_IMAGE="$VIRTUAL_IMAGE-arm32v7"
ARMV6_IMAGE="$VIRTUAL_IMAGE-arm32v6"

echo "checking if ${AMD64_IMAGE} Manifest exists"
if ! ./docker-cli manifest inspect ${AMD64_IMAGE}; then AMD64_IMAGE='' ; fi
echo "checking if ${ARMV6_IMAGE} Manifest exists"
if ! ./docker-cli manifest inspect ${ARMV6_IMAGE}; then ARMV6_IMAGE='' ; fi
echo "checking if ${ARMV7_IMAGE} Manifest exists"
if ! ./docker-cli manifest inspect ${ARMV7_IMAGE}; then ARMV7_IMAGE='' ; fi
echo "checking if ${ARM64_IMAGE} Manifest exists"
if ! ./docker-cli manifest inspect ${ARM64_IMAGE}; then ARM64_IMAGE='' ; fi

echo "Creating multiarch manifest"
./docker-cli manifest create $VIRTUAL_IMAGE $AMD64_IMAGE $ARMV6_IMAGE $ARMV7_IMAGE $ARM64_IMAGE
if [ -n "${ARMV6_IMAGE}" ]; then
  ./docker-cli manifest annotate $VIRTUAL_IMAGE $ARMV6_IMAGE --os linux --arch arm --variant v6
fi
if [ -n "${ARMV7_IMAGE}" ]; then
  ./docker-cli manifest annotate $VIRTUAL_IMAGE $ARMV7_IMAGE --os linux --arch arm --variant v7
fi
if [ -n "${ARM64_IMAGE}" ]; then
./docker-cli manifest annotate $VIRTUAL_IMAGE $ARM64_IMAGE --os linux --arch arm64 --variant v8
fi
./docker-cli manifest push $VIRTUAL_IMAGE

rm -r docker-cli ~/.docker
